{
  "$ref": "#/definitions/HoaDonAttrs",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "Config": {
      "additionalProperties": false,
      "description": "Final config options generated by sequelize.",
      "properties": {
        "database": {
          "type": "string"
        },
        "dialectModule": {
          "type": "object"
        },
        "dialectModulePath": {
          "type": [
            "null",
            "string"
          ]
        },
        "dialectOptions": {
          "additionalProperties": false,
          "properties": {
            "charset": {
              "type": "string"
            },
            "timeout": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "host": {
          "type": "string"
        },
        "keepDefaultTimezone": {
          "type": "boolean"
        },
        "native": {
          "type": "boolean"
        },
        "password": {
          "type": [
            "string",
            "null"
          ]
        },
        "pool": {
          "additionalProperties": false,
          "properties": {
            "acquire": {
              "type": "number"
            },
            "idle": {
              "type": "number"
            },
            "max": {
              "type": "number"
            },
            "min": {
              "type": "number"
            }
          },
          "required": [
            "acquire",
            "idle",
            "max",
            "min"
          ],
          "type": "object"
        },
        "port": {
          "type": "string"
        },
        "protocol": {
          "const": "tcp",
          "type": "string"
        },
        "replication": {
          "anyOf": [
            {
              "$ref": "#/definitions/ReplicationOptions"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "ssl": {
          "type": "boolean"
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "database",
        "username",
        "password",
        "protocol",
        "native",
        "ssl",
        "replication",
        "dialectModulePath"
      ],
      "type": "object"
    },
    "ConnectionManager": {
      "additionalProperties": false,
      "type": "object"
    },
    "ConnectionOptions": {
      "additionalProperties": false,
      "properties": {
        "database": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "port": {
          "type": [
            "string",
            "number"
          ]
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "HoaDonAttrs": {
      "additionalProperties": false,
      "properties": {
        "HinhThucThanhToan": {
          "type": "string"
        },
        "MaHD": {
          "type": "string"
        },
        "MaTK": {
          "type": "string"
        },
        "NgayGiao": {
          "format": "date-time",
          "type": "string"
        },
        "NgayLap": {
          "format": "date-time",
          "type": "string"
        },
        "NoiGiao": {
          "type": "string"
        },
        "TtVanChuyen": {
          "$ref": "#/definitions/TtVanChuyen"
        }
      },
      "required": [
        "MaHD",
        "MaTK"
      ],
      "type": "object"
    },
    "Model": {
      "additionalProperties": false,
      "properties": {
        "_attributes": {
          "deprecated": "This property will become a Symbol in v7 to prevent collisions.\nUse Attributes<Model> instead of this property to be forward-compatible.",
          "description": "A dummy variable that doesn't exist on the real object. This exists so Typescript can infer the type of the attributes in static functions. Don't try to access this!\n\nBefore using these, I'd tried typing out the functions without them, but Typescript fails to infer `TAttributes` in signatures like the below.\n\n```ts public static findOne<M extends Model<TAttributes>, TAttributes>(   this: { new(): M },   options: NonNullFindOptions<TAttributes> ): Promise<M>; ```"
        },
        "_creationAttributes": {
          "deprecated": "This property will become a Symbol in v7 to prevent collisions.\nUse CreationAttributes<Model> instead of this property to be forward-compatible.",
          "description": "A similar dummy variable that doesn't exist on the real object. Do not try to access this in real code."
        },
        "_model": {
          "$ref": "#/definitions/Model%3Cany%2Cany%3E",
          "description": "A dummy variable that doesn't exist on the real object. This exists so Typescript can infer the type of the attributes in static functions. Don't try to access this!"
        },
        "dataValues": {
          "description": "Object that contains underlying model data"
        },
        "isNewRecord": {
          "description": "Returns true if this instance has not yet been persisted to the database",
          "type": "boolean"
        },
        "sequelize": {
          "$ref": "#/definitions/Sequelize",
          "description": "A reference to the sequelize instance"
        }
      },
      "required": [
        "_attributes",
        "_creationAttributes",
        "_model",
        "dataValues",
        "isNewRecord",
        "sequelize"
      ],
      "type": "object"
    },
    "Model<TtVanChuyenAttrs,Optional<TtVanChuyenAttrs,\"MaVC\">>": {
      "additionalProperties": false,
      "properties": {
        "_attributes": {
          "$ref": "#/definitions/TtVanChuyenAttrs",
          "deprecated": "This property will become a Symbol in v7 to prevent collisions.\nUse Attributes<Model> instead of this property to be forward-compatible.",
          "description": "A dummy variable that doesn't exist on the real object. This exists so Typescript can infer the type of the attributes in static functions. Don't try to access this!\n\nBefore using these, I'd tried typing out the functions without them, but Typescript fails to infer `TAttributes` in signatures like the below.\n\n```ts public static findOne<M extends Model<TAttributes>, TAttributes>(   this: { new(): M },   options: NonNullFindOptions<TAttributes> ): Promise<M>; ```"
        },
        "_creationAttributes": {
          "$ref": "#/definitions/Optional%3CTtVanChuyenAttrs%2C%22MaVC%22%3E",
          "deprecated": "This property will become a Symbol in v7 to prevent collisions.\nUse CreationAttributes<Model> instead of this property to be forward-compatible.",
          "description": "A similar dummy variable that doesn't exist on the real object. Do not try to access this in real code."
        },
        "_model": {
          "$ref": "#/definitions/Model%3CTtVanChuyenAttrs%2COptional%3CTtVanChuyenAttrs%2C%22MaVC%22%3E%3E",
          "description": "A dummy variable that doesn't exist on the real object. This exists so Typescript can infer the type of the attributes in static functions. Don't try to access this!"
        },
        "dataValues": {
          "$ref": "#/definitions/TtVanChuyenAttrs",
          "description": "Object that contains underlying model data"
        },
        "isNewRecord": {
          "description": "Returns true if this instance has not yet been persisted to the database",
          "type": "boolean"
        },
        "sequelize": {
          "$ref": "#/definitions/Sequelize",
          "description": "A reference to the sequelize instance"
        }
      },
      "required": [
        "_attributes",
        "_creationAttributes",
        "_model",
        "dataValues",
        "isNewRecord",
        "sequelize"
      ],
      "type": "object"
    },
    "Model<any,any>": {
      "additionalProperties": false,
      "properties": {
        "_attributes": {
          "deprecated": "This property will become a Symbol in v7 to prevent collisions.\nUse Attributes<Model> instead of this property to be forward-compatible.",
          "description": "A dummy variable that doesn't exist on the real object. This exists so Typescript can infer the type of the attributes in static functions. Don't try to access this!\n\nBefore using these, I'd tried typing out the functions without them, but Typescript fails to infer `TAttributes` in signatures like the below.\n\n```ts public static findOne<M extends Model<TAttributes>, TAttributes>(   this: { new(): M },   options: NonNullFindOptions<TAttributes> ): Promise<M>; ```"
        },
        "_creationAttributes": {
          "deprecated": "This property will become a Symbol in v7 to prevent collisions.\nUse CreationAttributes<Model> instead of this property to be forward-compatible.",
          "description": "A similar dummy variable that doesn't exist on the real object. Do not try to access this in real code."
        },
        "_model": {
          "$ref": "#/definitions/Model%3Cany%2Cany%3E",
          "description": "A dummy variable that doesn't exist on the real object. This exists so Typescript can infer the type of the attributes in static functions. Don't try to access this!"
        },
        "dataValues": {
          "description": "Object that contains underlying model data"
        },
        "isNewRecord": {
          "description": "Returns true if this instance has not yet been persisted to the database",
          "type": "boolean"
        },
        "sequelize": {
          "$ref": "#/definitions/Sequelize",
          "description": "A reference to the sequelize instance"
        }
      },
      "required": [
        "_attributes",
        "_creationAttributes",
        "_model",
        "dataValues",
        "isNewRecord",
        "sequelize"
      ],
      "type": "object"
    },
    "ModelCtor<Model>": {
      "$ref": "#/definitions/ModelStatic%3CModel%3E",
      "deprecated": "use ModelStatic"
    },
    "ModelManager": {
      "additionalProperties": false,
      "properties": {
        "all": {
          "items": {
            "$ref": "#/definitions/Model"
          },
          "type": "array"
        },
        "models": {
          "items": {
            "$ref": "#/definitions/Model"
          },
          "type": "array"
        },
        "sequelize": {
          "$ref": "#/definitions/Sequelize"
        }
      },
      "required": [
        "sequelize",
        "models",
        "all"
      ],
      "type": "object"
    },
    "ModelStatic<Model>": {
      "additionalProperties": false,
      "properties": {
        "_model": {
          "$ref": "#/definitions/Model%3Cany%2Cany%3E",
          "description": "A dummy variable that doesn't exist on the real object. This exists so Typescript can infer the type of the attributes in static functions. Don't try to access this!"
        },
        "isNewRecord": {
          "description": "Returns true if this instance has not yet been persisted to the database",
          "type": "boolean"
        },
        "sequelize": {
          "$ref": "#/definitions/Sequelize",
          "description": "A reference to the sequelize instance"
        }
      },
      "required": [
        "_model",
        "isNewRecord",
        "sequelize"
      ],
      "type": "object"
    },
    "Optional<TtVanChuyenAttrs,\"MaVC\">": {
      "additionalProperties": false,
      "description": "Type helper for making certain fields of an object optional. This is helpful for creating the `CreationAttributes` from your `Attributes` for a Model.",
      "properties": {
        "CreatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "MaHD": {
          "type": "string"
        },
        "MaVC": {
          "type": "number"
        },
        "NgayGiaoDuKien": {
          "format": "date-time",
          "type": "string"
        },
        "NgayGiaoThucTe": {
          "format": "date-time",
          "type": "string"
        },
        "Status": {
          "type": "string"
        },
        "TenDonViVC": {
          "type": "string"
        },
        "UpdatedAt": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "MaHD",
        "Status",
        "TenDonViVC"
      ],
      "type": "object"
    },
    "ReplicationOptions": {
      "additionalProperties": false,
      "description": "Interface for replication Options in the sequelize constructor",
      "properties": {
        "read": {
          "items": {
            "$ref": "#/definitions/ConnectionOptions"
          },
          "type": "array"
        },
        "write": {
          "$ref": "#/definitions/ConnectionOptions"
        }
      },
      "required": [
        "read",
        "write"
      ],
      "type": "object"
    },
    "Sequelize": {
      "additionalProperties": false,
      "description": "This is the main class, the entry point to sequelize. To use it, you just need to import sequelize:\n\n```js const Sequelize = require('sequelize'); ```\n\nIn addition to sequelize, the connection library for the dialect you want to use should also be installed in your project. You don't need to import it however, as sequelize will take care of that.",
      "properties": {
        "Sequelize": {
          "$ref": "#/definitions/Sequelize",
          "description": "A reference to Sequelize constructor from sequelize. Useful for accessing DataTypes, Errors etc."
        },
        "_attributes": {
          "deprecated": "This property will become a Symbol in v7 to prevent collisions.\nUse Attributes<Model> instead of this property to be forward-compatible.",
          "description": "A similar dummy variable that doesn't exist on the real object. Do not try to access this in real code."
        },
        "_creationAttributes": {
          "deprecated": "This property will become a Symbol in v7 to prevent collisions.\nUse CreationAttributes<Model> instead of this property to be forward-compatible.",
          "description": "A similar dummy variable that doesn't exist on the real object. Do not try to access this in real code."
        },
        "_model": {
          "$ref": "#/definitions/Model",
          "description": "A dummy variable that doesn't exist on the real object. This exists so Typescript can infer the type of the attributes in static functions. Don't try to access this!"
        },
        "and": {
          "$comment": "(...args: T) => { [Op.and]: T }"
        },
        "cast": {
          "$comment": "(val: unknown, type: string) => Cast"
        },
        "col": {
          "$comment": "(col: string) => Col"
        },
        "config": {
          "$ref": "#/definitions/Config",
          "description": "Final config that is used by sequelize."
        },
        "connectionManager": {
          "$ref": "#/definitions/ConnectionManager"
        },
        "fn": {
          "$comment": "(fn: string, ...args: unknown[]) => Fn"
        },
        "json": {
          "$comment": "(conditionsOrPath: string | object, value?: string | number | boolean) => Json"
        },
        "literal": {
          "$comment": "(val: string) => Literal"
        },
        "modelManager": {
          "$ref": "#/definitions/ModelManager"
        },
        "models": {
          "additionalProperties": {
            "$ref": "#/definitions/ModelCtor%3CModel%3E"
          },
          "description": "Dictionary of all models linked with this instance.",
          "type": "object"
        },
        "or": {
          "$comment": "(...args: T) => { [Op.or]: T }"
        },
        "where": {
          "$comment": "(leftOperand: WhereLeftOperand | Where, operator: Op, rightOperand: WhereOperators[Op]) => Where"
        }
      },
      "required": [
        "Sequelize",
        "_attributes",
        "_creationAttributes",
        "_model",
        "and",
        "cast",
        "col",
        "config",
        "connectionManager",
        "fn",
        "json",
        "literal",
        "modelManager",
        "models",
        "or",
        "where"
      ],
      "type": "object"
    },
    "TtVanChuyen": {
      "additionalProperties": false,
      "properties": {
        "CreatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "MaHD": {
          "type": "string"
        },
        "MaVC": {
          "type": "number"
        },
        "NgayGiaoDuKien": {
          "format": "date-time",
          "type": "string"
        },
        "NgayGiaoThucTe": {
          "format": "date-time",
          "type": "string"
        },
        "Status": {
          "type": "string"
        },
        "TenDonViVC": {
          "type": "string"
        },
        "UpdatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "_attributes": {
          "$ref": "#/definitions/TtVanChuyenAttrs",
          "deprecated": "This property will become a Symbol in v7 to prevent collisions.\nUse Attributes<Model> instead of this property to be forward-compatible.",
          "description": "A dummy variable that doesn't exist on the real object. This exists so Typescript can infer the type of the attributes in static functions. Don't try to access this!\n\nBefore using these, I'd tried typing out the functions without them, but Typescript fails to infer `TAttributes` in signatures like the below.\n\n```ts public static findOne<M extends Model<TAttributes>, TAttributes>(   this: { new(): M },   options: NonNullFindOptions<TAttributes> ): Promise<M>; ```"
        },
        "_creationAttributes": {
          "$ref": "#/definitions/Optional%3CTtVanChuyenAttrs%2C%22MaVC%22%3E",
          "deprecated": "This property will become a Symbol in v7 to prevent collisions.\nUse CreationAttributes<Model> instead of this property to be forward-compatible.",
          "description": "A similar dummy variable that doesn't exist on the real object. Do not try to access this in real code."
        },
        "_model": {
          "$ref": "#/definitions/Model%3CTtVanChuyenAttrs%2COptional%3CTtVanChuyenAttrs%2C%22MaVC%22%3E%3E",
          "description": "A dummy variable that doesn't exist on the real object. This exists so Typescript can infer the type of the attributes in static functions. Don't try to access this!"
        },
        "dataValues": {
          "$ref": "#/definitions/TtVanChuyenAttrs",
          "description": "Object that contains underlying model data"
        },
        "isNewRecord": {
          "description": "Returns true if this instance has not yet been persisted to the database",
          "type": "boolean"
        },
        "sequelize": {
          "$ref": "#/definitions/Sequelize",
          "description": "A reference to the sequelize instance"
        }
      },
      "required": [
        "MaHD",
        "MaVC",
        "Status",
        "TenDonViVC",
        "_attributes",
        "_creationAttributes",
        "_model",
        "dataValues",
        "isNewRecord",
        "sequelize"
      ],
      "type": "object"
    },
    "TtVanChuyenAttrs": {
      "additionalProperties": false,
      "properties": {
        "CreatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "MaHD": {
          "type": "string"
        },
        "MaVC": {
          "type": "number"
        },
        "NgayGiaoDuKien": {
          "format": "date-time",
          "type": "string"
        },
        "NgayGiaoThucTe": {
          "format": "date-time",
          "type": "string"
        },
        "Status": {
          "type": "string"
        },
        "TenDonViVC": {
          "type": "string"
        },
        "UpdatedAt": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "MaHD",
        "TenDonViVC",
        "Status"
      ],
      "type": "object"
    }
  }
}